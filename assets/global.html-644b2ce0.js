import{_ as i,r as o,o as d,c as l,b as e,e as t,a,w as h,f as s}from"./app-fbbd1cea.js";const c={},p=e("h1",{id:"global-settings",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#global-settings","aria-hidden":"true"},"#"),t(" Global settings")],-1),u=e("h3",{id:"hide-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hide-files","aria-hidden":"true"},"#"),t(),e("strong",null,"Hide files")],-1),g=e("code",null,"javascript",-1),f={href:"http://README.md",target:"_blank",rel:"noopener noreferrer"},m=s('<h3 id="package-download" tabindex="-1"><a class="header-anchor" href="#package-download" aria-hidden="true">#</a> <strong>Package download</strong></h3><p>Whether to enable package download, default is true.</p><h3 id="customize-head" tabindex="-1"><a class="header-anchor" href="#customize-head" aria-hidden="true">#</a> <strong>Customize head</strong></h3><p>Any content you want which are automatically placed at the beginning of the head of the web page</p><h3 id="customize-body" tabindex="-1"><a class="header-anchor" href="#customize-body" aria-hidden="true">#</a> <strong>Customize body</strong></h3><p>Any content you want which are automatically placed at the end of the body of the web page</p><h3 id="link-expiration" tabindex="-1"><a class="header-anchor" href="#link-expiration" aria-hidden="true">#</a> <strong>Link expiration</strong></h3><p>The expiration time of the direct link, in hours. If it equals 0, it will not expire. Default is 0.</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>Only the straight chain of the path with the password added will have an expiration time, otherwise it will not expire.Because the expiration time is added to the sign query parameter, and the path without adding the password will not check the sign.</p></div><h3 id="privacy-regs" tabindex="-1"><a class="header-anchor" href="#privacy-regs" aria-hidden="true">#</a> <strong>Privacy regs</strong></h3><p>What you don&#39;t want to show in the error message, One regular expression (in <code>Golang</code>) per line. The matched content will be replaced with * of the corresponding length.</p><h3 id="ocr-api" tabindex="-1"><a class="header-anchor" href="#ocr-api" aria-hidden="true">#</a> <strong>Ocr api</strong></h3>',12),b={href:"https://hub.docker.com/r/xhofe/ddddocr_server",target:"_blank",rel:"noopener noreferrer"},x={href:"https://app.koyeb.com/",target:"_blank",rel:"noopener noreferrer"},y=e("h3",{id:"sign-all",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sign-all","aria-hidden":"true"},"#"),t(),e("strong",null,"Sign all")],-1),_={href:"https://xxxx.com/d/xx",target:"_blank",rel:"noopener noreferrer"},k=e("mark",null,[e("strong",null,"sign=vUQ5KFXnwMseKnIUXGRcfoG3cEHzKFBiPGp1NriMDXA=:0")],-1),w=e("p",null,"If you need to close it, you can close it yourself, but you need to pay attention to security issues. After closing the signature, if the site can be accessed by the public network, the password may be bypassed to access private files.",-1),v=e("h2",{id:"forward-direct-link-params",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#forward-direct-link-params","aria-hidden":"true"},"#"),t(),e("strong",null,"Forward direct link params")],-1),q={href:"https://github.com/alist-org/alist/issues/3123",target:"_blank",rel:"noopener noreferrer"},A=s(`<h3 id="filename-char-mapping" tabindex="-1"><a class="header-anchor" href="#filename-char-mapping" aria-hidden="true">#</a> <strong>Filename char mapping</strong></h3><p>Mainly to map some special characters so that Alist can work normally</p><p>For example, the <code>/</code> symbol is a path symbol in the Alist program. Some people’s files have <code>/</code> symbols that cause the file to be disconnected halfway and cannot be viewed. We can use this method to map and convert.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;|&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;xx1&quot;</span><span class="token operator">:</span><span class="token string">&quot;xx1&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;xx2&quot;</span><span class="token operator">:</span><span class="token string">&quot;xx2&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The default is the first one at the beginning. If you want to add it later, you can add it later. The format is as simple as above.</p>`,5);function I(E,z){const n=o("ExternalLinkIcon"),r=o("RouterLink");return d(),l("div",null,[p,u,e("p",null,[t("Match files hidden by regular expressions("),g,t("). If you don't understand, don't fill in them randomly. Wrong regular expressions will cause the front-end page to crash. One per line. By default, there is an example expression that hides "),e("a",f,[t("README.md"),a(n)]),t(" in all directories.")]),e("p",null,[t("It's not really hiding. It still exists in the list returned by the api, it just doesn't show up in the frontend list. So if you want to really hide, add a "),a(r,{to:"/guide/advanced/meta.html"},{default:h(()=>[t("meta")]),_:1}),t(" record instead.")]),m,e("p",null,[t("Used to identify verification codes. You can deploy yourself: "),e("a",b,[t("https://hub.docker.com/r/xhofe/ddddocr_server"),a(n)]),t(". The default ocr api is deployed on the "),e("a",x,[t("koyeb"),a(n)]),t("(No availability guarantee), which is not recommended to use in production environment.")]),y,e("p",null,[t("Add signatures to the direct link of all files (whether with password or not) That is "),e("a",_,[t("https://xxxx.com/d/xx"),a(n)]),t("? "),k]),w,v,e("p",null,[t("You can check it out yourself："),e("strong",null,[e("a",q,[t("https://github.com/alist-org/alist/issues/3123"),a(n)])])]),A])}const T=i(c,[["render",I],["__file","global.html.vue"]]);export{T as default};
